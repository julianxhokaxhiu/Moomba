# Azure Pipeline YAML file

name: 1.0.0$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - '*'

pr:
  drafts: false

variables:
  _IS_BUILD_CANARY: false
  _IS_GITHUB_RELEASE: false
  _RELEASE_NAME: Moomba
  _RELEASE_VERSION: v0
  _RELEASE_CONFIGURATION: Release
  _BUILD_VERSION: $(Build.BuildNumber)
  _BUILD_BRANCH: $(Build.SourceBranch)
  # GIT: Fix reporting from stderr to stdout
  GIT_REDIRECT_STDERR: 2>&1

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
- task: PowerShell@2
  displayName: 'Prepare $(_RELEASE_NAME) Env'
  inputs:
    filePath: $(Build.Repository.LocalPath)\.ci\prepare.ps1
- task: bleddynrichards.Assembly-Info-Task.Assembly-Info-NetCore.Assembly-Info-NetCore@2
  displayName: 'Set $(_RELEASE_NAME) Assembly Manifest Data'
  inputs:
    FileNames: |
      **/$(_RELEASE_NAME).csproj
    InsertAttributes: true
    WriteBOM: true
    VersionNumber: $(_BUILD_VERSION)
    FileVersionNumber: $(_BUILD_VERSION)
    InformationalVersion: $(_BUILD_VERSION)
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: 6.x
    checkLatest: true
- task: NuGetCommand@2
  displayName: 'Restore $(_RELEASE_NAME) NuGet Packages'
  inputs:
    command: restore
    restoreSolution: $(Build.Repository.LocalPath)\src\$(_RELEASE_NAME).sln
- task: VSBuild@1
  displayName: 'Build $(_RELEASE_NAME)'
  inputs:
    solution: $(Build.Repository.LocalPath)\src\$(_RELEASE_NAME).sln
    platform: Any CPU
    configuration: $(_RELEASE_CONFIGURATION)
    msbuildArgs: /p:WindowsTargetPlatformVersion=10.0.19041.0 /m
- task: PowerShell@2
  condition: and(not(contains(variables._BUILD_BRANCH, 'refs/pull/')), succeeded())
  displayName: 'Package $(_RELEASE_NAME)'
  inputs:
    filePath: $(Build.Repository.LocalPath)\.ci\package.ps1
    failOnStderr: true
    pwsh: true
  env:
    buildPath: $(Build.Repository.LocalPath)
- task: PublishPipelineArtifact@1
  displayName: 'Publish $(_RELEASE_NAME) Artifact'
  condition: and(eq(variables._IS_GITHUB_RELEASE, 'false'), not(contains(variables._BUILD_BRANCH, 'refs/pull/')), succeeded())
  inputs:
    targetPath: .dist\
    artifactName: $(_RELEASE_NAME)-$(_RELEASE_VERSION)
- task: GitHubRelease@0
  condition: and(eq(variables._IS_GITHUB_RELEASE, 'true'), eq(variables._IS_BUILD_CANARY, 'true'), succeeded())
  displayName: 'Delete $(_RELEASE_NAME) Release (Canary)'
  continueOnError: true
  inputs:
    gitHubConnection: github_ci
    action: delete
    tagSource: manual
    tag: canary
- task: GitHubRelease@0
  condition: and(eq(variables._IS_GITHUB_RELEASE, 'true'), eq(variables._IS_BUILD_CANARY, 'true'), succeeded())
  displayName: 'Create $(_RELEASE_NAME) Release (Canary)'
  inputs:
    gitHubConnection: github_ci
    assets: $(Build.Repository.LocalPath)\.dist\*
    isPreRelease: true
    tagSource: manual
    tag: canary
    title: $(_RELEASE_NAME)-$(_RELEASE_VERSION)
    releaseNotesSource: input
    releaseNotes: |
      This is a canary build. Please be aware it may be prone to crashing and is NOT tested by anyone. Use this build AT YOUR OWN RISK!
- task: GitHubRelease@0
  condition: and(eq(variables._IS_GITHUB_RELEASE, 'true'), eq(variables._IS_BUILD_CANARY, 'false'), succeeded())
  displayName: 'Create $(_RELEASE_NAME) Release (Stable)'
  inputs:
    gitHubConnection: github_ci
    assets: $(Build.Repository.LocalPath)\.dist\*
    title: $(_RELEASE_NAME)-$(_RELEASE_VERSION)
